count = 0
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
cap = cv2.VideoCapture(0)
thres = 3.5
f_t = 3
while(True):
    ret, frame = cap.read()
    
    img_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces_img = detector(img_gray,0)
    for face in faces_img:
        landmarks = predictor(img_gray, face)
        #landmarks_list = []
        left_eye = []
        right_eye = []
        #for i in range(0, landmarks.num_parts):
        #    landmarks_list.append((landmarks.part(i).x, landmarks.part(i).y))
        for i in range(36,42):
            left_eye.append((landmarks.part(i).x, landmarks.part(i).y))
        for i in range(42,48):
            right_eye.append((landmarks.part(i).x, landmarks.part(i).y))
        for i in left_eye:
            cv2.circle(frame, (i[0],i[1]), 3, (168, 0, 20), -1)
        for i in right_eye:
            cv2.circle(frame, (i[0],i[1]), 3, (168, 0, 20), -1)
        k = ratio(left_eye,right_eye)
        cv2.putText(frame, str(k),(10,10), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,255,255), 1)
        break
  #  print(k)
    if(k<0.25):
        count+=1
        if(count>15):
           # print("Sleeppppyy")
            
            cv2.putText(frame, "sleepy",(10,100), cv2.FONT_HERSHEY_SIMPLEX, 0.6,(0,255,255), 1)
    else:
        count = 0
        
    cv2.imshow('frame',frame)
    time.sleep(0.01)
    
    if(cv2.waitKey(1) & 0xFF == ord('q')):
        break                                                                                      
                                                                                                
#When everything done, release the capture
cap.release()
cv2.destroyAllWindows()                                                                                                   
                                                                                                   
